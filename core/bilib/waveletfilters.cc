/* ---------------------------------------------------------------------------

Filename     : WaveletFilters.c    

Author       : 	Michael Unser

Organization : EPFL, Biomedical Imaging Group

Date         : Sept 1994                 

Purpose		 : 
															 
 	This set of ANSI C subroutines will generate the filter 
 	coefficients (upper half) for the symmetrical wavelet 
 	filters for the various polynomial spline wavelet 
 	transforms described in the following papers.
 
Reference:

 	[1] M. Unser, A. Aldroubi and M. Eden, "A family of polynomial spline
 	wavelet transforms," Signal Processing, vol. 30, no. 2, pp. 141-162,
 	January 1993.
 	
	[2] M. Unser, A. Aldroubi and M. Eden, "On the asymptotic convergence
 	of B-spline wavelets to Gabor functions," IEEE Trans. Information Theory,
	vol. 38, no. 2, pp. 864-872, March 1992.
 				
Convention:

 	h:lowpass filter (analysis or synthesis depending on sign of Order)
 	g:highpass filter (analysis or synthesis depending on sign of Order)

---------------------------------------------------------------------------- */

/* ------------------------------------------------------------------------- */
/* Declaration of extern procedures                                          */
/* ------------------------------------------------------------------------- */
#include "configs.h"
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include "waveletfilters.h"

/* ------------------------------------------------------------------------- */
/* Declaration of static procedures                                          */
/* ------------------------------------------------------------------------- */
static int GetCoefBSpline(double *h,double *g, short Order);
static int GetCoefCardinalSpline(double *h,double *g, short Order);
static int GetCoefDualSpline(double *h,double *g, short Order);
static int GetCoefOrthogonalSpline(double *h, double *g, short Order);
static int GetCoefOrthonormalSpline(double *h, double *g, short Order);
static int mallat_filters(double h[], short Order);

/* ----------------------------------------------------------------------------
	Function:	WaveletFiltersGetSize
	
	Purpose:	Extern function that return the size of the filters
	
	Parameters:	Filter: is a short that indicates the type of the filter 
	 					Its value should be:
	 					1 for "B-Spline"
	 					2 for "Cardinal Spline"
	 					3 for "Dual Spline"
	 					4 for "Orthogonal Spline"
	 					5 ----- in another file: "Fractional"
	 					6 for "Orthonormal Spline"
	 			Order:  is the order of the spline.
	 					Its value should be:
	 						 1,  3 or  5 for analysis
	 						-1, -3 or -5 for synthesis
	 			ng:		output value, give the size of the highpass filter
	 			nh:		output value, give the size of the lowpass filter
	 			
---------------------------------------------------------------------------- */
extern int WaveletFiltersGetSize(short Filter, short Order, long *nh, long *ng)
{

	*ng = -1;
	*nh = -1;
	
	switch( Filter) {
	
		case 1: /* B-Spline */
			switch (Order) {
				case  0: *ng =  1; *nh =  1; break;
				case -1: *ng =  3; *nh =  2; break;
				case  1: *ng = 14; *nh = 14; break;
				case -3: *ng =  6; *nh =  3; break;
				case  3: *ng = 28; *nh = 28; break;
				case -5: *ng =  9; *nh =  4; break;
				case  5: *ng = 49; *nh = 42; break;
				default: *ng = -1; *nh = -1; return(ERROR);
			} 
			break;
		
		case 2: /* Cardinal Spline */
			switch (Order) {
				case  0: *ng =  1; *nh =  1; break;
				case -1: *ng =  8; *nh =  2; break;
				case  1: *ng = 14; *nh = 14; break;
				case -3: *ng = 14; *nh = 14; break;
				case  3: *ng = 25; *nh = 25; break;
				case -5: *ng = 20; *nh = 20; break;
				case  5: *ng = 35; *nh = 35; break;
				default: *ng = -1; *nh = -1; return(ERROR);
			}
			break;
		
		case 3:	/* Dual Spline */	
			switch (Order) {
				case  0: *ng =  1; *nh =  1; break;
				case -1: *ng = 14; *nh = 14; break;
				case  1: *ng =  3; *nh =  2; break;
				case -3: *ng = 28; *nh = 28; break;
				case  3: *ng =  6; *nh =  3; break;
				case -5: *ng = 49; *nh = 42; break;
				case  5: *ng =  9; *nh = 4; break;
				default: *ng = -1; *nh = -1; return(ERROR);
			}
			break;
			
		case 4: /* Orthogonal Spline */
			switch (Order) {
				case  0: *ng =  1; *nh =  1; break;
				case  1: *ng = 12; *nh = 12; break;
				case -1: *ng = 12; *nh = 12; break;
				case  3: *ng = 21; *nh = 21; break;
				case -3: *ng = 21; *nh = 21; break;
				case  5: *ng = 30; *nh = 30; break;
				case -5: *ng = 30; *nh = 30; break;
				default: *ng = -1; *nh = -1; return(ERROR);
			}
			break;
			
		case 6: /* Orthonormal Spline */
			switch (Order) {
				case  0: *ng =  1; *nh =  1; break;
				case  1: *ng = 14; *nh = 14; break;
				case -1: *ng = 14; *nh = 14; break;
				case  3: *ng = 27; *nh = 27; break;
				case -3: *ng = 27; *nh = 27; break;
				case  5: *ng = 42; *nh = 42; break;
				case -5: *ng = 42; *nh = 42; break;
				default: *ng = -1; *nh = -1; return(ERROR);
			}
			break;			
			
		default:
			*ng = -1; *nh = -1;
			return(ERROR);
	}
	
	return(!ERROR);
}

/* ----------------------------------------------------------------------------
	Function:	WaveletFiltersGetCoef

	Purpose: 	Extern function to get the coefficient of the filter
 				
	Parameters:	Filter: is a short that indicates the type of the filter 
	 					Its value should be:
	 					1 for "B-Spline"
	 					2 for "Cardinal Spline"
	 					3 for "Dual Spline"
	 					4 for "Orthogonal Spline"
	 			Order:  is the order of the spline.
	 					Its value should be:
	 						 1,  3 or  5 for analysis
	 						-1, -3 or -5 for synthesis
	 			h:		output value, array of coefficient lowpass filter
	 			g:		output value, array of coefficient highpass filter
 			

---------------------------------------------------------------------------- */
extern int WaveletFiltersGetCoef(short Filter, short Order, double *h, double *g)
{	
int	ret;

	ret = ERROR;
	
	switch( Filter) {
	
		case 1: /* B-Spline */
			ret = GetCoefBSpline( h, g, Order);
			break;
		
		case 2: /* Cardinal Spline */
			ret = GetCoefCardinalSpline( h, g, Order);
			break;
			
		case 3: /* Dual Spline */
			ret = GetCoefDualSpline( h, g, Order);
			break;
			
		case 4: /* Orthogonal Spline */
			ret = GetCoefOrthogonalSpline( h, g, Order);
			break;
			
		case 6: /* Orthonormal Spline */
			ret = GetCoefOrthonormalSpline( h, g, Order);
			break;				

		default:
			ret = ERROR;
	}
	
	return(ret);

}


/* ----------------------------------------------------------------------------
	Function:	GetCoefBSpline

	Purpose: 	Specifies B-spline wavelet filters.
 	Order: 		signed order of the spline
 				> 0  = > Direct transform (analysis)
 				< 0  = > Indirect transform (synthesis)
 			
	Reference:	M. Unser, A. Aldroubi and M. Eden, "A family of polynomial
				spline wavelet transforms," Signal Processing, vol. 30, no. 2,
 				pp. 141-162, January 1993.

---------------------------------------------------------------------------- */
static int GetCoefBSpline(double *h, double *g, short Order)
{  

	switch (Order) {
	
	case 0:
		h[0]  =  1.;
		g[0]  = -1.;
		break;

	case -1:
		h[0]  = 1.; 
		h[1]  = 0.5;

		g[0]  =  0.833333; 
		g[1]  = -0.5; 
		g[2]  =  0.0833333;
		break;

	case 1:
		h[0]  =  0.683013; 
		h[1]  =  0.316987; 
		h[2]  = -0.116025;
		h[3]  = -0.0849365; 
		h[4]  =  0.0310889; 
		h[5]  =  0.0227587;
		h[6]  = -0.00833025; 
		h[7]  = -0.00609817; 
		h[8]  =  0.00223208;
		h[9]  =  0.001634; 
		h[10] = -0.000598085; 
		h[11] = -0.000437829;
		h[12] =  0.000160256; 
		h[13] =  0.000117316;

		g[0]  =  0.866025; 
		g[1]  = -0.316987; 
		g[2]  = -0.232051;
		g[3]  =  0.0849365; 
		g[4]  =  0.0621778; 
		g[5]  = -0.0227587;
		g[6]  = -0.0166605; 
		g[7]  =  0.00609817; 
		g[8]  =  0.00446417;
		g[9]  = -0.001634; 
		g[10] = -0.00119617; 
		g[11] =  0.000437829;
		g[12] =  0.000320513; 
		g[13] = -0.000117316;
		break;

	case -3:
		h[0]  =  0.75; 
		h[1]  =  0.5; 
		h[2]  =  0.125;
		
		g[0]  =  0.601786; 
		g[1]  = -0.458383; 
		g[2]  =  0.196032;
		g[3]  = -0.0415923; 
		g[4]  =  0.0030754; 
		g[5]  = -0.0000248016;
		break;

	case 3:
		h[0]  =  0.893163; 
		h[1]  =  0.400681; 
		h[2]  = -0.282212;
		h[3]  = -0.232925; 
		h[4]  =  0.129084; 
		h[5]  =  0.126457;
		h[6]  = -0.0664208; 
		h[7]  = -0.0679036; 
		h[8]  =  0.0352261;
		h[9]  =  0.0363736; 
		h[10] = -0.0188157; 
		h[11] = -0.0194733;
		h[12] =  0.0100667; 
		h[13] =  0.0104241; 
		h[14] = -0.00538793;
		h[15] = -0.00557984; 
		h[16] =  0.00288398; 
		h[17] =  0.00298678;
		h[18] = -0.00154373; 
		h[19] = -0.00159877; 
		h[20] =  0.000826327;
		h[21] =  0.000855789; 
		h[22] = -0.000442316;
		h[23] = -0.000458087; 
		h[24] =  0.000236763; 
		h[25] =  0.000245205;
		h[26] = -0.000126735; 
		h[27] = -0.000131254;
	 
		g[0]  =  1.47539; 
		g[1]  = -0.468423; 
		g[2]  = -0.742098; 
		g[3]  =  0.345771;
		g[4]  =  0.389746; 
		g[5]  = -0.196794; 
		g[6]  = -0.207691;
		g[7]  =  0.106776; 
		g[8]  =  0.111058; 
		g[9]  = -0.057331;
		g[10] = -0.0594334; 
		g[11] =  0.0307097; 
		g[12] =  0.0318118;
		g[13] = -0.0164409; 
		g[14] = -0.017028; 
		g[15] =  0.00880084;
		g[16] =  0.00911475; 
		g[17] = -0.00471096; 
		g[18] = -0.00487894;
		g[19] =  0.00252169; 
		g[20] =  0.0026116; 
		g[21] = -0.00134981;
		g[22] = -0.00139794; 
		g[23] =  0.000722527; 
		g[24] =  0.000748289;
		g[25] = -0.000386755; 
		g[26] = -0.000400545;
		g[27] =  0.000207022;
		break;

	case -5:
		h[0]  =  0.625; 
		h[1]  =  0.46875; 
		h[2]  =  0.1875; 
		h[3]  =  0.03125;
		
		g[0]  =  0.495856; 
		g[1]  = -0.41119; 
		g[2]  =  0.232144;
		g[3]  = -0.0863425; 
		g[4]  =  0.0197985; 
		g[5]  = -0.00246597;
		g[6]  =  0.000129072; 
		g[7]  =  1.59864E-6; 
		g[8]  =  7.82878E-10;
		break;
   		
	case 5:
		h[0]  =  1.24685; 
		h[1]  =  0.488133; 
		h[2]  = -0.563928; 
		h[3]  = -0.406943;
		h[4]  =  0.301441; 
		h[5]  =  0.282812; 
		h[6]  = -0.180243;
		h[7]  = -0.189972; 
		h[8]  =  0.114031; 
		h[9]  =  0.126358;
		h[10] = -0.0740051; 
		h[11] = -0.0837508; 
		h[12] =  0.0485563;
		h[13] =  0.0554339; 
		h[14] = -0.0320051; 
		h[15] = -0.0366707;
		h[16] =  0.0211357; 
		h[17] =  0.024253; 
		h[18] = -0.0139686;
		h[19] = -0.0160387; 
		h[20] =  0.00923489; 
		h[21] =  0.0106061;
		h[22] = -0.00610615; 
		h[23] = -0.00701356; 
		h[24] =  0.00403764;
		h[25] =  0.00463785; 
		h[26] = -0.00266991; 
		h[27] = -0.00306686;
		h[28] =  0.00176551; 
		h[29] =  0.00202801; 
		h[30] = -0.00116747;
		h[31] = -0.00134105; 
		h[32] =  0.000772008; 
		h[33] =  0.000886792;
		h[34] = -0.000510503; 
		h[35] = -0.000586404; 
		h[36] =  0.00033758;
		h[37] =  0.000387766; 
		h[38] = -0.000223233;
		h[39] = -0.000256412; 
		h[40] =  0.000147621; 
		h[41] =  0.000169549;
	
		g[0]  =  2.86904; 
		g[1]  = -0.692385; 
		g[2]  = -1.9481; 
		g[3]  =  0.812757;
		g[4]  =  1.25952; 
		g[5]  = -0.636672; 
		g[6]  = -0.821107;
		g[7]  =  0.448233; 
		g[8]  =  0.539409; 
		g[9]  = -0.30383;
		g[10] = -0.355691; 
		g[11] =  0.202936; 
		g[12] =  0.234931;
		g[13] = -0.134746; 
		g[14] = -0.155277; 
		g[15] =  0.0892529;
		g[16] =  0.102659; 
		g[17] = -0.0590607; 
		g[18] = -0.0678791;
		g[19] =  0.039066; 
		g[20] =  0.0448846; 
		g[21] = -0.025836;
		g[22] = -0.0296803; 
		g[23] =  0.0170853; 
		g[24] =  0.0196264;
		g[25] = -0.0112982; 
		g[26] = -0.0129783; 
		g[27] =  0.00747115;
		g[28] =  0.00858208; 
		g[29] = -0.00494043; 
		g[30] = -0.00567504;
		g[31] =  0.00326694; 
		g[32] =  0.00375272; 
		g[33] = -0.00216032;
		g[34] = -0.00248155; 
		g[35] =  0.00142854; 
		g[36] =  0.00164097;
		g[37] = -0.000944637; 
		g[38] = -0.00108513; 
		g[39] =  0.000624645;
		g[40] =  0.000717581; 
		g[41] = -0.000413039;
		g[42] = -0.000474542; 
		g[43] =  0.000273103; 
		g[44] =  0.000313844;
		g[45] = -0.000180554; 
		g[46] = -0.000207602;
		g[47] =  0.000119335; 
		g[48] =  0.000137384;
	  break;
	   
	default:
		h[0] =  1.;
		g[0] = -1.;
		return(ERROR);
	}
	
	return(!ERROR);
}


/* ----------------------------------------------------------------------------
	Function: 	GetCoefCardinalSpline

	Purpose:	Specifies C-spline (or cardinal) wavelet filters.
				Order: signed order of the spline
 				> 0  = > Direct transform (analysis)
 				< 0  = > Indirect transform (synthesis)
---------------------------------------------------------------------------- */
static int GetCoefCardinalSpline(double *h, double *g, short Order)
{ 

	switch (Order) {
	case 0:
		h[0]  =  1.;
		g[0]  = -1.;
		break;

	case -1:
		h[0]  =  1.; 
		h[1]  =  0.5;
		
		g[0]  =  1.; 
		g[1]  = -0.55051; 
		g[2]  =  0; 
		g[3]  =  0.0556128; 
		g[4]  =  0;
		g[5]  = -0.00561804; 
		g[6]  =  0; 
		g[7]  =  0.000567537;
		break;

	case 1:
		h[0]  =  0.683013; 
		h[1]  =  0.316987; 
		h[2]  = -0.116025;
		h[3]  = -0.0849365; 
		h[4]  =  0.0310889; 
		h[5]  =  0.0227587;
		h[6]  = -0.00833025; 
		h[7]  = -0.00609817; 
		h[8]  =  0.00223208;
		h[9]  =  0.001634; 
		h[10] = -0.000598085; 
		h[11] = -0.000437829;
		h[12] =  0.000160256; 
		h[13] =  0.000117316;

		g[0]  =  0.683013; 
		g[1]  = -0.283494; 
		g[2]  = -0.116025;
		g[3]  =  0.0424682; 
		g[4]  =  0.0310889; 
		g[5]  = -0.0113793;
		g[6]  = -0.00833025; 
		g[7]  =  0.00304908; 
		g[8]  =  0.00223208;
		g[9]  = -0.000816999; 
		g[10] = -0.000598085; 
		g[11] =  0.000218914;
		g[12] =  0.000160256; 
		g[13] = -0.0000586579;
   	break;

	case -3:
		h[0]  =  1.; 
		h[1]  =  0.600481; 
		h[2]  =  0; 
		h[3]  = -0.127405; 
		h[4]  =  0;
		h[5]  =  0.034138; 
		h[6]  =  0; 
		h[7]  = -0.00914725; 
		h[8]  =  0;
		h[9]  =  0.002451; 
		h[10] =  0; 
		h[11] = -0.000656743; 
		h[12] =  0;
		h[13] =  0.000175974;
		
		g[0]  =  1.; 
		g[1]  = -0.603284; 
		g[2]  =  0; 
		g[3]  =  0.132403; 
		g[4]  =  0;
		g[5]  = -0.037129; 
		g[6]  =  0; 
		g[7]  =  0.0102285; 
		g[8]  =  0;
		g[9]  = -0.0028318; 
		g[10] =  0; 
		g[11] =  0.000782945; 
		g[12] =  0;
		g[13] = -0.000216549;
   	break;

	case 3:
		h[0]  =  0.594902; 
		h[1]  =  0.31431; 
		h[2]  = -0.0816632;
		h[3]  = -0.0942586; 
		h[4]  =  0.0541374; 
		h[5]  =  0.0454105;
		h[6]  = -0.0307778; 
		h[7]  = -0.0236728; 
		h[8]  =  0.0166858;
		h[9]  =  0.0125975; 
		h[10] = -0.00895838; 
		h[11] = -0.00673388;
		h[12] =  0.00479847; 
		h[13] =  0.00360339; 
		h[14] = -0.00256892;
		h[15] = -0.00192868; 
		h[16] =  0.00137514; 
		h[17] =  0.00103237;
		h[18] = -0.000736093; 
		h[19] = -0.000552606;
		h[20] =  0.000394017; 
		h[21] =  0.000295799; 
		h[22] = -0.00021091;
		h[23] = -0.000158335; 
		h[24] =  0.000112896;

		g[0]  =  0.594902; 
		g[1]  = -0.312645; 
		g[2]  = -0.0816632;
		g[3]  =  0.0911067; 
		g[4]  =  0.0541374; 
		g[5]  = -0.0431604;
		g[6]  = -0.0307778; 
		g[7]  =  0.0224984; 
		g[8]  =  0.0166858;
		g[9]  = -0.0119658; 
		g[10] = -0.00895838; 
		g[11] =  0.00639584;
		g[12] =  0.00479847; 
		g[13] = -0.00342242; 
		g[14] = -0.00256892;
		g[15] =  0.00183182; 
		g[16] =  0.00137514; 
		g[17] = -0.000980518;
		g[18] = -0.000736093; 
		g[19] =  0.00052485; 
		g[20] =  0.000394017;
		g[21] = -0.000280942; 
		g[22] = -0.00021091; 
		g[23] =  0.000150382;
		g[24] =  0.000112896;
    break;

	case -5:
		h[0]  = 1.; 
		h[1]  =  0.619879; 
		h[2]  =  0; 
		h[3]  = -0.167965; 
		h[4]  =  0;
		h[5]  =  0.0686374; 
		h[6]  =  0; 
		h[7]  = -0.0293948; 
		h[8]  =  0;
		h[9]  =  0.0126498; 
		h[10] =  0; 
		h[11] = -0.00544641; 
		h[12] =  0;
		h[13] =  0.00234508; 
		h[14] =  0; 
		h[15] = -0.00100973; 
		h[16] =  0;
		h[17] =  0.000434766; 
		h[18] =  0;
		h[19] = -0.000187199;

		g[0]  =  1.; 
		g[1]  = -0.620075; 
		g[2]  =  0; 
		g[3]  =  0.16838; 
		g[4]  =  0;
		g[5]  = -0.0689961; 
		g[6]  =  0; 
		g[7]  =  0.029608; 
		g[8]  =  0;
		g[9]  = -0.0127622; 
		g[10] =  0; 
		g[11] =  0.00550431; 
		g[12] =  0;
		g[13] = -0.00237399; 
		g[14] =  0; 
		g[15] =  0.00102392; 
		g[16] =  0;
		g[17] = -0.000441621; 
		g[18] =  0; 
		g[19] =  0.000190474;
    break;

	case 5:
		h[0]  =  0.564388; 
		h[1]  =  0.316168; 
		h[2]  = -0.0597634;
		h[3]  = -0.0998708; 
		h[4]  =  0.0484525; 
		h[5]  =  0.0539099;
		h[6]  = -0.0355614; 
		h[7]  = -0.033052; 
		h[8]  =  0.0246347;
		h[9]  =  0.0212024; 
		h[10] = -0.0166097; 
		h[11] = -0.0138474;
		h[12] =  0.0110719; 
		h[13] =  0.00911006; 
		h[14] = -0.00734567;
		h[15] = -0.0060115; 
		h[16] =  0.00486404; 
		h[17] =  0.00397176;
		h[18] = -0.00321822; 
		h[19] = -0.00262545; 
		h[20] =  0.00212859;
		h[21] =  0.00173587; 
		h[22] = -0.0014077; 
		h[23] = -0.0011478;
		h[24] =  0.000930899; 
		h[25] =  0.000758982; 
		h[26] = -0.000615582;
		h[27] = -0.000501884; 
		h[28] =  0.000407066; 
		h[29] =  0.000331877;
		h[30] = -0.00026918; 
		h[31] = -0.000219459; 
		h[32] =  0.000178;
		h[33] =  0.00014512; 	
		h[34] = -0.000117706;

		g[0]  =  0.564388; 
		g[1]  = -0.316056; 
		g[2]  = -0.0597634;
		g[3]  =  0.0996253; 
		g[4]  =  0.0484525; 
		g[5]  = -0.0536786;
		g[6]  = -0.0355614; 
		g[7]  =  0.0328901; 
		g[8]  =  0.0246347;
		g[9]  = -0.0210957; 
		g[10] = -0.0166097; 
		g[11] =  0.0137766;
		g[12] =  0.0110719; 
		g[13] = -0.00906331; 
		g[14] = -0.00734567;
		g[15] =  0.00598058; 
		g[16] =  0.00486404; 
		g[17] = -0.00395131;
		g[18] = -0.00321822; 
		g[19] =  0.00261193; 
		g[20] =  0.00212859;
		g[21] = -0.00172693; 
		g[22] = -0.0014077; 
		g[23] =  0.00114189;
		g[24] =  0.000930899; 
		g[25] = -0.000755072;
		g[26] = -0.000615582; 
		g[27] =  0.000499299; 
		g[28] =  0.000407066;
		g[29] = -0.000330168; 
		g[30] = -0.00026918;
		g[31] =  0.000218328;
		g[32] =  0.000178; 
		g[33] = -0.000144373; 
		g[34] = -0.000117706;
		break;

	default:
		h[0] = 1.;
		g[0] = -1.;
		return(ERROR);
	}
	
	return(!ERROR);
}

/* ----------------------------------------------------------------------------
	Function: 	GetCoefDualSpline

	Purpose: 	Specifies Dual spline wavelet filters.
 				Order:order of the spline

---------------------------------------------------------------------------- */
static int GetCoefDualSpline(double *h, double *g, short Order)
{
	return( GetCoefBSpline(h, g, (short)(-Order)));
}

/* ----------------------------------------------------------------------------
	Function: 	GetCoefOrthogonalSpline

	Purpose:	Specifies O-spline (orthogonal or Battle-Lemarie) wavelet filters.
				Order:order of the spline
---------------------------------------------------------------------------- */
static int GetCoefOrthogonalSpline(double *h, double *g, short Order)
{ 
short i;
long nh[1], ng[1];
	
 	if ( mallat_filters(h, (short)(abs(Order))) == ERROR) 
 		return(ERROR);
 	
	if ( WaveletFiltersGetSize( 4, Order, nh, ng) == ERROR)
		return(ERROR);
		
	for (i = 0; i<*nh; i++) {
		if (Order<0) h[i] = 2.*h[i];
		g[i] = pow(-1.,(double)i)*h[i];
	}
	if (*nh == 1) g[0] = -1.;
	
	return(!ERROR);
 }
 
 /* ----------------------------------------------------------------------------
	Function: 	mallat_filters

	Purpose:  	Initializes filter array for orthogonal spline
				pyramid and wavelet transform.

	Michael Unser / BEIP	MAY-92
---------------------------------------------------------------------------- */
static int mallat_filters(double h[], short Order)
{ 

	switch (Order) {
	case 0:
		h[0] = 1.;
		break;

	case 1:
		h[0]  =  0.578163; 
		h[1]  =  0.280931; 
		h[2]  = -0.0488618;
		h[3]  = -0.0367309; 
		h[4]  =  0.0120003; 
		h[5]  =  0.00706442;
		h[6]  = -0.00274588; 
		h[7]  = -0.00155701;
		h[8]  =  0.000652922; 
		h[9]  =  0.000361781;
		h[10] = -0.000158601;
		h[11] = -0.0000867523;
		break;
	case 3:
		h[0]  =  0.541736; 
		h[1]  =  0.30683; 
		h[2]  = -0.035498;
		h[3]  = -0.0778079; 
		h[4]  =  0.0226846; 
		h[5]  =  0.0297468;
		h[6]  = -0.0121455; 
		h[7]  = -0.0127154; 
		h[8]  =  0.00614143;
		h[9]  =  0.00579932; 
		h[10] = -0.00307863;
		h[11] = -0.00274529; 
		h[12] =  0.00154624; 
		h[13] =  0.00133086;
		h[14] = -0.000780468; 
		h[15] = -0.00065562;
		h[16] =  0.000395946; 
		h[17] =  0.000326749;
		h[18] = -0.000201818; 
		h[19] = -0.000164264;
		h[20] =  0.000103307;
		break;
	case 5:
		h[0]  =  0.528374; 
		h[1]  =  0.312869; 
		h[2]  = -0.0261771;
		h[3]  = -0.0914068; 
		h[4]  =  0.0208414; 
		h[5]  =  0.0433544;
		h[6]  = -0.0148537; 
		h[7]  = -0.0229951; 
		h[8]  =  0.00990635;
		h[9]  =  0.0128754; 
		h[10] = -0.00639886;
		h[11] = -0.00746848; 
		h[12] =  0.00407882;
		h[13] =  0.00444002; 
		h[14] = -0.00258816; 
		h[15] = -0.00268646; 
		h[16] =  0.00164132; 
		h[17] =  0.00164659;
		h[18] = -0.00104207; 
		h[19] = -0.00101912;
		h[20] =  0.000662836; 
		h[21] =  0.000635563;
		h[22] = -0.000422485; 
		h[23] = -0.000398759;
		h[24] =  0.000269842; 
		h[25] =  0.000251419;
		h[26] = -0.000172685; 
		h[27] = -0.000159168;
		h[28] =  0.000110709; 
		h[29] =  0.000101113;
		break;
	default:
		return(ERROR);
		break;
	}
	
	return(!ERROR);
}


/* ----------------------------------------------------------------------------
	Function:	GetCoefOrthonormalSpline

	Purpose: 	Specifies Orthonormal-spline wavelet filters.
 	Order: 		signed order of the spline
 				> 0  = > Direct transform (analysis)
 				< 0  = > Indirect transform (synthesis)
 			
---------------------------------------------------------------------------- */
static int GetCoefOrthonormalSpline(double *h, double *g, short Order)
{  

	switch (Order) {
	
	case 0:
		h[0]  =  1.4142;
		g[0]  = -1.4142;
		break;

	case -1:
		h[0]=0.81763;
		h[1]=0.39729;
		h[2]=-0.069099;
		h[3]=-0.051944;
		h[4]=0.016971;
		h[5]=0.0099904;
		h[6]=-0.0038832;
		h[7]=-0.0022019;
		h[8]=0.00092335;
		h[9]=0.00051162;
		h[10]=-0.00022429;
		h[11]=-0.00012268;
		h[12]=5.2436e-05;
		h[13]=3.2179e-05;

		g[0]=0.81763;
		g[1]=-0.39729;
		g[2]=-0.069099;
		g[3]=0.051944;
		g[4]=0.016971;
		g[5]=-0.0099904;
		g[6]=-0.0038832;
		g[7]=0.0022019;
		g[8]=0.00092335;
		g[9]=-0.00051162;
		g[10]=-0.00022429;
		g[11]=0.00012268;
		g[12]=5.2436e-05;
		g[13]=-3.2179e-05;
		break;

	case 1:
		h[0]=0.81763;
		h[1]=0.39729;
		h[2]=-0.069099;
		h[3]=-0.051944;
		h[4]=0.016971;
		h[5]=0.0099904;
		h[6]=-0.0038832;
		h[7]=-0.0022019;
		h[8]=0.00092335;
		h[9]=0.00051162;
		h[10]=-0.00022429;
		h[11]=-0.00012268;
		h[12]=5.2436e-05;
		h[13]=3.2179e-05;

		g[0]=0.81763;
		g[1]=-0.39729;
		g[2]=-0.069099;
		g[3]=0.051944;
		g[4]=0.016971;
		g[5]=-0.0099904;
		g[6]=-0.0038832;
		g[7]=0.0022019;
		g[8]=0.00092335;
		g[9]=-0.00051162;
		g[10]=-0.00022429;
		g[11]=0.00012268;
		g[12]=5.2436e-05;
		g[13]=-3.2179e-05;
		break;

	case -3:
		h[0]=0.76607;
		h[1]=0.43389;
		h[2]=-0.050198;
		h[3]=-0.11003;
		h[4]=0.032079;
		h[5]=0.042065;
		h[6]=-0.017175;
		h[7]=-0.017981;
		h[8]=0.0086847;
		h[9]=0.0082009;
		h[10]=-0.0043535;
		h[11]=-0.0038821;
		h[12]=0.0021866;
		h[13]=0.001882;
		h[14]=-0.0011037;
		h[15]=-0.00092713;
		h[16]=0.0005599;
		h[17]=0.00046208;
		h[18]=-0.00028536;
		h[19]=-0.00023233;
		h[20]=0.00014603;
		h[21]=0.00011762;
		h[22]=-7.4993e-05;
		h[23]=-6.1546e-05;
		h[24]=3.8497e-05;
		h[25]=4.7661e-05;
		h[26]=1.2733e-05;

		g[0]=-0.76607;
		g[1]=0.43389;
		g[2]=0.050198;
		g[3]=-0.11003;
		g[4]=-0.032079;
		g[5]=0.042065;
		g[6]=0.017175;
		g[7]=-0.017981;
		g[8]=-0.0086847;
		g[9]=0.0082009;
		g[10]=0.0043535;
		g[11]=-0.0038821;
		g[12]=-0.0021866;
		g[13]=0.001882;
		g[14]=0.0011037;
		g[15]=-0.00092713;
		g[16]=-0.0005599;
		g[17]=0.00046208;
		g[18]=0.00028536;
		g[19]=-0.00023233;
		g[20]=-0.00014603;
		g[21]=0.00011762;
		g[22]=7.4993e-05;
		g[23]=-6.1546e-05;
		g[24]=-3.8497e-05;
		g[25]=4.7661e-05;
		g[26]=-1.2733e-05;
	break;

	case 3:
		h[0]=0.76607;
		h[1]=0.43389;
		h[2]=-0.050198;
		h[3]=-0.11003;
		h[4]=0.032079;
		h[5]=0.042065;
		h[6]=-0.017175;
		h[7]=-0.017981;
		h[8]=0.0086847;
		h[9]=0.0082009;
		h[10]=-0.0043535;
		h[11]=-0.0038821;
		h[12]=0.0021866;
		h[13]=0.001882;
		h[14]=-0.0011037;
		h[15]=-0.00092713;
		h[16]=0.0005599;
		h[17]=0.00046208;
		h[18]=-0.00028536;
		h[19]=-0.00023233;
		h[20]=0.00014603;
		h[21]=0.00011762;
		h[22]=-7.4993e-05;
		h[23]=-6.1546e-05;
		h[24]=3.8497e-05;
		h[25]=4.7661e-05;
		h[26]=1.2733e-05;

		g[0]=-0.76607;
		g[1]=0.43389;
		g[2]=0.050198;
		g[3]=-0.11003;
		g[4]=-0.032079;
		g[5]=0.042065;
		g[6]=0.017175;
		g[7]=-0.017981;
		g[8]=-0.0086847;
		g[9]=0.0082009;
		g[10]=0.0043535;
		g[11]=-0.0038821;
		g[12]=-0.0021866;
		g[13]=0.001882;
		g[14]=0.0011037;
		g[15]=-0.00092713;
		g[16]=-0.0005599;
		g[17]=0.00046208;
		g[18]=0.00028536;
		g[19]=-0.00023233;
		g[20]=-0.00014603;
		g[21]=0.00011762;
		g[22]=7.4993e-05;
		g[23]=-6.1546e-05;
		g[24]=-3.8497e-05;
		g[25]=4.7661e-05;
		g[26]=-1.2733e-05;
		break;

	case -5:
		h[0]=0.74729;
		h[1]=0.4425;
		h[2]=-0.037023;
		h[3]=-0.12928;
		h[4]=0.029477;
		h[5]=0.061317;
		h[6]=-0.021008;
		h[7]=-0.032523;
		h[8]=0.014011;
		h[9]=0.01821;
		h[10]=-0.0090501;
		h[11]=-0.010563;
		h[12]=0.0057688;
		h[13]=0.0062796;
		h[14]=-0.0036605;
		h[15]=-0.0037995;
		h[16]=0.0023214;
		h[17]=0.0023288;
		h[18]=-0.0014738;
		h[19]=-0.0014414;
		h[20]=0.00093747;
		h[21]=0.00089889;
		h[22]=-0.00059753;
		h[23]=-0.00056398;
		h[24]=0.00038165;
		h[25]=0.00035559;
		h[26]=-0.00024423;
		h[27]=-0.00022512;
		h[28]=0.00015658;
		h[29]=0.00014301;
		h[30]=-0.00010055;
		h[31]=-9.1113e-05;
		h[32]=6.4669e-05;
		h[33]=5.8198e-05;
		h[34]=-4.1649e-05;
		h[35]=-3.7256e-05;
		h[36]=2.729e-05;
		h[37]=2.458e-05;
		h[38]=-2.2593e-05;
		h[39]=-3.5791e-05;
		h[40]=-1.7098e-05;
		h[41]=-2.9619e-06;

		g[0]=0.74729;
		g[1]=-0.4425;
		g[2]=-0.037023;
		g[3]=0.12928;
		g[4]=0.029477;
		g[5]=-0.061317;
		g[6]=-0.021008;
		g[7]=0.032523;
		g[8]=0.014011;
		g[9]=-0.01821;
		g[10]=-0.0090501;
		g[11]=0.010563;
		g[12]=0.0057688;
		g[13]=-0.0062796;
		g[14]=-0.0036605;
		g[15]=0.0037995;
		g[16]=0.0023214;
		g[17]=-0.0023288;
		g[18]=-0.0014738;
		g[20]=0.00093747;
		g[21]=-0.00089889;
		g[22]=-0.00059753;
		g[23]=0.00056398;
		g[24]=0.00038165;
		g[25]=-0.00035559;
		g[26]=-0.00024423;
		g[27]=0.00022512;
		g[28]=0.00015658;
		g[29]=-0.00014301;
		g[30]=-0.00010055;
		g[31]=9.1113e-05;
		g[32]=6.4669e-05;
		g[33]=-5.8198e-05;
		g[34]=-4.1649e-05;
		g[35]=3.7256e-05;
		g[36]=2.729e-05;
		g[37]=-2.458e-05;
		g[38]=-2.2593e-05;
		g[39]=3.5791e-05;
		g[40]=-1.7098e-05;
		g[41]=2.9619e-06;
		break;
   		
	case 5:
		h[0]=0.74729;
		h[1]=0.4425;
		h[2]=-0.037023;
		h[3]=-0.12928;
		h[4]=0.029477;
		h[5]=0.061317;
		h[6]=-0.021008;
		h[7]=-0.032523;
		h[8]=0.014011;
		h[9]=0.01821;
		h[10]=-0.0090501;
		h[11]=-0.010563;
		h[12]=0.0057688;
		h[13]=0.0062796;
		h[14]=-0.0036605;
		h[15]=-0.0037995;
		h[16]=0.0023214;
		h[17]=0.0023288;
		h[18]=-0.0014738;
		h[19]=-0.0014414;
		h[20]=0.00093747;
		h[21]=0.00089889;
		h[22]=-0.00059753;
		h[23]=-0.00056398;
		h[24]=0.00038165;
		h[25]=0.00035559;
		h[26]=-0.00024423;
		h[27]=-0.00022512;
		h[28]=0.00015658;
		h[29]=0.00014301;
		h[30]=-0.00010055;
		h[31]=-9.1113e-05;
		h[32]=6.4669e-05;
		h[33]=5.8198e-05;
		h[34]=-4.1649e-05;
		h[35]=-3.7256e-05;
		h[36]=2.729e-05;
		h[37]=2.458e-05;
		h[38]=-2.2593e-05;
		h[39]=-3.5791e-05;
		h[40]=-1.7098e-05;
		h[41]=-2.9619e-06;


		g[0]=0.74729;
		g[1]=-0.4425;
		g[2]=-0.037023;
		g[3]=0.12928;
		g[4]=0.029477;
		g[5]=-0.061317;
		g[6]=-0.021008;
		g[7]=0.032523;
		g[8]=0.014011;
		g[9]=-0.01821;
		g[10]=-0.0090501;
		g[11]=0.010563;
		g[12]=0.0057688;
		g[13]=-0.0062796;
		g[14]=-0.0036605;
		g[15]=0.0037995;
		g[16]=0.0023214;
		g[17]=-0.0023288;
		g[18]=-0.0014738;
		g[20]=0.00093747;
		g[21]=-0.00089889;
		g[22]=-0.00059753;
		g[23]=0.00056398;
		g[24]=0.00038165;
		g[25]=-0.00035559;
		g[26]=-0.00024423;
		g[27]=0.00022512;
		g[28]=0.00015658;
		g[29]=-0.00014301;
		g[30]=-0.00010055;
		g[31]=9.1113e-05;
		g[32]=6.4669e-05;
		g[33]=-5.8198e-05;
		g[34]=-4.1649e-05;
		g[35]=3.7256e-05;
		g[36]=2.729e-05;
		g[37]=-2.458e-05;
		g[38]=-2.2593e-05;
		g[39]=3.5791e-05;
		g[40]=-1.7098e-05;
		g[41]=2.9619e-06;
		break;
	   
	default:
		h[0] =  1.4142;
		g[0] = -1.4142;
		return(ERROR);
	}
	
	return(!ERROR);
}
