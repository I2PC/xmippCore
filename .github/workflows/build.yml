# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the devel branch
  push:
    branches: [ devel, master ]
  pull_request:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    # Disabling shallow clone is recommended for improving relevancy of reporting
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # This will try to fetch cache for current commit
      # Since no such cache exists, it will try to bring newest restore-key one
      # i.e. the one from latest build. See https://docs.github.com/en/actions/guides/caching-dependencies-to-speed-up-workflows#matching-a-cache-key
      - name: Fetch cache
        uses: actions/cache@v2.1.5
        with:
          path: sonarCache
          key: ${{ runner.os }}-sonarCache-${{ github.sha }}
          restore-keys: ${{ runner.os }}-sonarCache-

      - name: Export CI variables
        run: echo "BUILD_DIR=CIBuild" >> $GITHUB_ENV
          
      - name: Fetching Xmipp
        run: ./scripts/ci_build
      
      - name: Install ccache
        uses: hendrikmuhs/ccache-action@v1.0.3
          
      - name: Install CUDA
        uses: Jimver/cuda-toolkit@v0.2.8
        id: cuda-toolkit
        with:
          cuda: '11.7.0'
          linux-local-args: '[ "--toolkit" ]'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y scons libfftw3-dev libopenmpi-dev openmpi-bin libhdf5-dev python3-numpy python3-dev libtiff5-dev unzip libopencv-dev
  
      - name: Compile Xmipp
        run: ./xmipp noAsk
        working-directory: ${{ env.BUILD_DIR }}
        env:
          CIBuild: 1
          BUILD_TESTS: True

      # If we got here, Xmipp can be build with this xmippCore
      # Build only the core to be able to run the static code analysis
      - name: Compile XmippCore
        run: |
          cp ${BUILD_DIR}/xmipp.conf ./
          python3 $(which scons) . -j4

