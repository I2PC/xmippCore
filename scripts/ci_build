#!/usr/bin/env python3
# ***************************************************************************
# * Authors:     David Strelak (dstrelak@cnb.csic.es)
# *
# *
# * This program is free software; you can redistribute it and/or modify
# * it under the terms of the GNU General Public License as published by
# * the Free Software Foundation; either version 2 of the License, or
# * (at your option) any later version.
# *
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# *
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
# * 02111-1307  USA
# *
# *  All comments concerning this program package may be sent to the
# *  e-mail address 'scipion@cnb.csic.es'
# ***************************************************************************/

import os
import subprocess
import shutil

XMIPP = 'xmipp'
REPOSITORIES = {XMIPP: 'https://github.com/I2PC/xmipp.git'}
BUILD_DIR = 'CIBuild'


def green(text):
    return "\033[92m "+text+"\033[0m"


def red(text):
    return "\033[91m "+text+"\033[0m"


def runJob(cmd, cwd='./', show_output=True, log=None, show_command=True):
    if show_command:
        print(green(cmd))
    p = subprocess.Popen(
        cmd, cwd=cwd, env=os.environ,
        stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True)
    while True:
        output = p.stdout.readline().decode("utf-8")
        if output == '' and p.poll() is not None:
            break
        if output:
            l = output.rstrip()
            if show_output:
                print(l)
            if log is not None:
                log.append(l)
    return True


def checkout(repo, branch):
    _, branch = getBranch(repo)
    print(green('Checkout ' + repo + ' ...'))
    runJob('git clone --single-branch --branch {} {} {}'.format(branch, REPOSITORIES[repo], BUILD_DIR))


def removePrefix(text, prefix):
    if text.startswith(prefix):
        return text[len(prefix):]
    return text


def getCurrentCIBranch():
    # see https://docs.travis-ci.com/user/environment-variables/
    # see https://docs.github.com/en/actions/reference/environment-variables#default-environment-variables
    # On Travis, PR will have the TRAVIS_PULL_REQUEST_BRANCH variable non-empty
    # otherwise the TRAVIS_BRANCH will hold the name of the current branch
    # On Github Actions, GITHUB_REF will hold either the tag or branch (including prefix) to the branch which triggered 
    # the workflow
    # For pull request, GITHUB_HEAD_REF will be set (no prefix)
    current_branch = (
        os.environ.get('TRAVIS_PULL_REQUEST_BRANCH') or
        os.environ.get('TRAVIS_BRANCH') or
        os.environ.get('GITHUB_HEAD_REF') or
        os.environ.get('GITHUB_REF'))
    current_branch = removePrefix(current_branch, 'refs/heads/')
    current_branch = removePrefix(current_branch, 'refs/tags/')
    print(green("Detected branch: " + current_branch))
    return current_branch is not None, current_branch


def getAllBranches(repo):
    log = []
    prefix = 'refs/heads/'
    result = runJob('git ls-remote -h %s' % REPOSITORIES[repo],
                    show_output=False, log=log, show_command=False)
    if result:
        branches = [l.split(prefix)[1] for l in log]
        return True, branches
    print(red('Cannot list branches for ' + repo))
    return False, None


def getBranch(repo):
    # we need to get current branch of the xmipp
    r1, branchHint = getCurrentCIBranch()
    r2, branches = getAllBranches(repo)
    if r1 and r2 and branchHint in branches:
        return True, branchHint
    # default branch
    return getDefaultBranch(repo)


def getDefaultBranch(repo):
    log = []
    key = 'HEAD branch:'
    # this might not work for git < 1.8.5,
    # see:
    # https://stackoverflow.com/a/32503667/5484355
    # https://stackoverflow.com/questions/2832269/git-remote-head-is-ambiguous
    # In such a case we return None (and during e.g. clone the client should
    # decide what is the default branch)
    result = runJob('git remote show %s' % REPOSITORIES[repo],
                    show_output=False, log=log, show_command=False)
    if result:
        for l in log:
            if key in l:
                branch = l.split(key)[1]  # HEAD branch: devel
                return (True, branch.strip())
    print(red('Cannot auto-detect default branch for ' + repo +
              '. Maybe git version < 1.8.5?'))
    return (False, None)


def main():
    # get xmipp
    checkout(XMIPP, None)
    # copy current dir to right location
    dst = os.path.join(BUILD_DIR, 'src', 'xmippCore')
    shutil.copytree('.', dst, ignore=shutil.ignore_patterns(BUILD_DIR))
    # xmipp is ready to be build

if __name__ == '__main__':
    main()
